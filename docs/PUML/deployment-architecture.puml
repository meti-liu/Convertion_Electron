@startuml Deployment_Architecture

!theme plain
title JIG Viewer - 应用打包与部署架构

package "开发环境" {
  class SourceCode {
    +JavaScript/Vue.js代码
    +Python脚本
    +配置文件
    +资源文件
  }

  class PythonDevelopment {
    +json_script.py
    +parse_fails.py
    +converters/*.py
    +requirements.txt
  }

  class ElectronDevelopment {
    +app/main/*.js
    +app/renderer/*.vue
    +package.json
    +vite.config.js
  }
}

package "打包过程" {
  class PyInstaller {
    +分析Python依赖
    +创建独立可执行文件
    +包含所有必要的库
    +生成.exe文件
  }

  class ElectronBuilder {
    +读取package.json配置
    +处理资源文件
    +创建应用程序包
    +生成安装程序
  }

  class ViteBuild {
    +编译Vue.js代码
    +优化静态资源
    +生成dist_web目录
    +代码压缩和混淆
  }
}

package "打包输出" {
  class PythonExecutables {
    +json_script.exe
    +parse_fails.exe
    +所有依赖已内置
    +无需Python环境
  }

  class ElectronApp {
    +JIG Viewer.exe
    +resources/app.asar
    +Electron运行时
    +系统依赖文件
  }

  class AppResources {
    +python/目录
    +test/fixtures/目录
    +其他资源文件
  }
}

package "最终部署包" {
  class DeploymentPackage {
    +dist/win-unpacked/
    +所有必要文件
    +独立运行
    +无需额外安装
  }

  class ApplicationStructure {
    +JIG Viewer.exe (主程序)
    +resources/ (资源目录)
    +├── app.asar (应用代码)
    +├── python/ (Python可执行文件)
    +├── test/ (测试数据)
    +└── 其他Electron运行时文件
  }

  class SystemFiles {
    +.dll文件 (Windows动态库)
    +.bin文件 (二进制文件)
    +.pak文件 (Chromium资源)
    +其他系统依赖
  }
}

package "运行环境" {
  class TargetSystem {
    +Windows操作系统
    +无需Node.js
    +无需Python
    +无需额外依赖
  }

  class RuntimeExecution {
    +启动JIG Viewer.exe
    +加载Electron运行时
    +创建渲染进程
    +调用Python可执行文件
  }
}

' 打包流程
SourceCode --> PythonDevelopment : 提取Python代码
SourceCode --> ElectronDevelopment : 提取Electron代码

PythonDevelopment --> PyInstaller : 打包Python脚本
ElectronDevelopment --> ViteBuild : 构建前端代码
ElectronDevelopment --> ElectronBuilder : 打包Electron应用

PyInstaller --> PythonExecutables : 生成.exe文件
ViteBuild --> ElectronApp : 构建结果
ElectronBuilder --> ElectronApp : 主应用程序
ElectronBuilder --> AppResources : 资源文件

PythonExecutables --> DeploymentPackage : 包含到resources/python/
ElectronApp --> DeploymentPackage : 主程序文件
AppResources --> DeploymentPackage : 其他资源
SystemFiles --> DeploymentPackage : 运行时文件

DeploymentPackage --> ApplicationStructure : 组织文件结构
ApplicationStructure --> TargetSystem : 部署到目标系统
TargetSystem --> RuntimeExecution : 运行应用程序

' 配置和流程说明
note top of PyInstaller : 使用PyInstaller将Python脚本\n打包为独立可执行文件\n包含所有必要的依赖库\n无需目标系统安装Python

note top of ElectronBuilder : 根据package.json中的build配置\n打包Electron应用程序\n处理文件过滤和资源复制\n生成最终的应用程序包

note right of PythonExecutables : 打包后的Python可执行文件\n体积较大但独立运行\n包含完整的Python运行时\n和所有必要的第三方库

note bottom of DeploymentPackage : 最终的部署包\n包含所有必要文件\n可以直接在目标系统运行\n无需额外的安装步骤

note left of SystemFiles : Electron运行时必需文件\n包含Chromium引擎\nNode.js运行时\n和其他系统依赖\n不可删除

' 关键特性标注
note as N1
打包后的应用特点：
• 完全独立运行
• 无需Python环境
• 无需Node.js环境
• 包含所有依赖
• 支持离线使用
end note

note as N2
打包配置关键点：
• extraResources配置
• 文件过滤规则
• Python脚本路径
• 资源文件复制
• 平台特定设置
end note

@enduml
